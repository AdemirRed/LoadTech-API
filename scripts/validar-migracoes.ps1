# Script para validar se as migra√ß√µes rodaram corretamente no Render
# Execute se houver problemas com banco de dados

param(
    [string]$BaseUrl = "https://loadtech-api.onrender.com"  # Substitua pela sua URL real
)

Write-Host "=== VALIDA√á√ÉO DE MIGRA√á√ïES NO RENDER ===" -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para testar endpoint espec√≠fico que usa campos das migra√ß√µes
function Test-MigrationFields {
    param($token)
    
    $headers = @{
        "Authorization" = "Bearer $token"
        "Content-Type" = "application/json"
    }
    
    Write-Host "Testando campos das migra√ß√µes..." -ForegroundColor Yellow
    
    try {
        # Tenta acessar dados do usu√°rio que devem incluir campos do Asaas
        $userResponse = Invoke-RestMethod -Uri "$BaseUrl/api/auth/me" -Method GET -Headers $headers -TimeoutSec 30
        
        Write-Host "‚úÖ Campos b√°sicos OK" -ForegroundColor Green
        
        # Verifica se campos do Asaas est√£o presentes
        $hasAsaasFields = $userResponse.PSObject.Properties.Name -contains "asaas_customer_id"
        
        if ($hasAsaasFields) {
            Write-Host "‚úÖ Campos do Asaas encontrados" -ForegroundColor Green
            if ($userResponse.asaas_customer_id) {
                Write-Host "   Customer ID: $($userResponse.asaas_customer_id)" -ForegroundColor White
            }
        } else {
            Write-Host "‚ö†Ô∏è  Campos do Asaas n√£o encontrados" -ForegroundColor Yellow
            Write-Host "   Isso pode indicar que as migra√ß√µes n√£o rodaram" -ForegroundColor Yellow
        }
        
        return $true
        
    } catch {
        Write-Host "‚ùå Erro ao validar campos das migra√ß√µes" -ForegroundColor Red
        Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Testa conectividade primeiro
Write-Host "Testando conectividade..." -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "$BaseUrl/health" -Method GET -TimeoutSec 30
    Write-Host "‚úÖ Servidor online" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Servidor offline ou com problemas" -ForegroundColor Red
    Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Faz login para obter token
Write-Host ""
Write-Host "Fazendo login..." -ForegroundColor Yellow
$loginData = @{
    email = "admin@loadtech.com"
    password = "123456"
} | ConvertTo-Json

try {
    $loginResponse = Invoke-RestMethod -Uri "$BaseUrl/api/auth/login" -Method POST -Body $loginData -ContentType "application/json" -TimeoutSec 30
    $token = $loginResponse.token
    Write-Host "‚úÖ Login realizado com sucesso" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Falha no login" -ForegroundColor Red
    Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
    
    if ($_.Exception.Message -like "*column*does not exist*") {
        Write-Host ""
        Write-Host "üîç DIAGN√ìSTICO: Erro de coluna indica problema nas migra√ß√µes" -ForegroundColor Red
        Write-Host "   As migra√ß√µes provavelmente n√£o rodaram corretamente" -ForegroundColor White
        Write-Host ""
        Write-Host "üí° SOLU√á√ïES:" -ForegroundColor Yellow
        Write-Host "1. Verifique os logs do build no dashboard do Render" -ForegroundColor White
        Write-Host "2. Confirme se 'npm run migrate' aparece nos logs" -ForegroundColor White
        Write-Host "3. Verifique se DATABASE_URL est√° configurada corretamente" -ForegroundColor White
        Write-Host "4. Se necess√°rio, force um novo deploy fazendo um commit vazio:" -ForegroundColor White
        Write-Host "   git commit --allow-empty -m 'Force redeploy'" -ForegroundColor Gray
        Write-Host "   git push" -ForegroundColor Gray
    }
    
    exit 1
}

# Valida campos das migra√ß√µes
Write-Host ""
$migrationsOk = Test-MigrationFields -token $token

Write-Host ""
Write-Host "=== DIAGN√ìSTICO COMPLETO ===" -ForegroundColor Green

if ($migrationsOk) {
    Write-Host "‚úÖ Migra√ß√µes executadas com sucesso!" -ForegroundColor Green
    Write-Host "‚úÖ Banco de dados configurado corretamente" -ForegroundColor Green
    Write-Host "‚úÖ API funcionando normalmente" -ForegroundColor Green
} else {
    Write-Host "‚ùå Problemas detectados nas migra√ß√µes" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß A√á√ïES RECOMENDADAS:" -ForegroundColor Yellow
    Write-Host "1. Verificar logs do Render:" -ForegroundColor White
    Write-Host "   - Procurar por 'Running migrations'" -ForegroundColor Gray
    Write-Host "   - Verificar se h√° erros de SQL" -ForegroundColor Gray
    Write-Host ""
    Write-Host "2. Verificar vari√°veis de ambiente:" -ForegroundColor White
    Write-Host "   - DATABASE_URL deve estar definida" -ForegroundColor Gray
    Write-Host "   - Deve apontar para PostgreSQL v√°lido" -ForegroundColor Gray
    Write-Host ""
    Write-Host "3. For√ßar novo deploy se necess√°rio:" -ForegroundColor White
    Write-Host "   git commit --allow-empty -m 'Fix migrations'" -ForegroundColor Gray
    Write-Host "   git push" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üìä Para monitoramento cont√≠nuo:" -ForegroundColor White
Write-Host "   Execute: .\scripts\monitor-deploy.ps1" -ForegroundColor Gray
