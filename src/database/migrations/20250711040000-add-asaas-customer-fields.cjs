const { DataTypes } = require('sequelize');

module.exports = {
  up: async (queryInterface, Sequelize) => {
  // Verificar quais campos j√° existem para evitar duplica√ß√£o
  const tableDescription = await queryInterface.describeTable('users');
  
  console.log('üìù Verificando campos existentes na tabela users...');
  
  // Adicionar apenas campos que n√£o existem
  if (!tableDescription.phone) {
    console.log('‚ûï Adicionando campo phone');
    await queryInterface.addColumn('users', 'phone', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Telefone fixo do cliente'
    });
  } else {
    console.log('‚è≠Ô∏è Campo phone j√° existe');
  }

  if (!tableDescription.mobile_phone) {
    console.log('‚ûï Adicionando campo mobile_phone');
    await queryInterface.addColumn('users', 'mobile_phone', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Telefone celular do cliente'
    });
  } else {
    console.log('‚è≠Ô∏è Campo mobile_phone j√° existe');
  }

  if (!tableDescription.address) {
    console.log('‚ûï Adicionando campo address');
    await queryInterface.addColumn('users', 'address', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Logradouro do endere√ßo'
    });
  } else {
    console.log('‚è≠Ô∏è Campo address j√° existe');
  }

  if (!tableDescription.address_number) {
    console.log('‚ûï Adicionando campo address_number');
    await queryInterface.addColumn('users', 'address_number', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'N√∫mero do endere√ßo'
    });
  } else {
    console.log('‚è≠Ô∏è Campo address_number j√° existe');
  }

  if (!tableDescription.complement) {
    console.log('‚ûï Adicionando campo complement');
    await queryInterface.addColumn('users', 'complement', {
      type: DataTypes.STRING(255),
      allowNull: true,
      comment: 'Complemento do endere√ßo (m√°x. 255 caracteres)'
    });
  } else {
    console.log('‚è≠Ô∏è Campo complement j√° existe');
  }

  if (!tableDescription.province) {
    console.log('‚ûï Adicionando campo province');
    await queryInterface.addColumn('users', 'province', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Bairro'
    });
  } else {
    console.log('‚è≠Ô∏è Campo province j√° existe');
  }

  if (!tableDescription.postal_code) {
    console.log('‚ûï Adicionando campo postal_code');
    await queryInterface.addColumn('users', 'postal_code', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'CEP do endere√ßo'
    });
  } else {
    console.log('‚è≠Ô∏è Campo postal_code j√° existe');
  }

  if (!tableDescription.external_reference) {
    console.log('‚ûï Adicionando campo external_reference');
    await queryInterface.addColumn('users', 'external_reference', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Identificador do cliente no nosso sistema'
    });
  } else {
    console.log('‚è≠Ô∏è Campo external_reference j√° existe');
  }

  if (!tableDescription.notification_disabled) {
    console.log('‚ûï Adicionando campo notification_disabled');
    await queryInterface.addColumn('users', 'notification_disabled', {
      type: DataTypes.BOOLEAN,
      allowNull: true,
      defaultValue: false,
      comment: 'true para desabilitar notifica√ß√µes de cobran√ßa'
    });
  } else {
    console.log('‚è≠Ô∏è Campo notification_disabled j√° existe');
  }

  if (!tableDescription.additional_emails) {
    console.log('‚ûï Adicionando campo additional_emails');
    await queryInterface.addColumn('users', 'additional_emails', {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Emails adicionais para notifica√ß√µes separados por v√≠rgula'
    });
  } else {
    console.log('‚è≠Ô∏è Campo additional_emails j√° existe');
  }

  if (!tableDescription.municipal_inscription) {
    console.log('‚ûï Adicionando campo municipal_inscription');
    await queryInterface.addColumn('users', 'municipal_inscription', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Inscri√ß√£o municipal do cliente'
    });
  } else {
    console.log('‚è≠Ô∏è Campo municipal_inscription j√° existe');
  }

  if (!tableDescription.state_inscription) {
    console.log('‚ûï Adicionando campo state_inscription');
    await queryInterface.addColumn('users', 'state_inscription', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Inscri√ß√£o estadual do cliente'
    });
  } else {
    console.log('‚è≠Ô∏è Campo state_inscription j√° existe');
  }

  if (!tableDescription.observations) {
    console.log('‚ûï Adicionando campo observations');
    await queryInterface.addColumn('users', 'observations', {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Observa√ß√µes adicionais sobre o cliente'
    });
  } else {
    console.log('‚è≠Ô∏è Campo observations j√° existe');
  }

  if (!tableDescription.group_name) {
    console.log('‚ûï Adicionando campo group_name');
    await queryInterface.addColumn('users', 'group_name', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Nome do grupo ao qual o cliente pertence'
    });
  } else {
    console.log('‚è≠Ô∏è Campo group_name j√° existe');
  }

  if (!tableDescription.company) {
    console.log('‚ûï Adicionando campo company');
    await queryInterface.addColumn('users', 'company', {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'Nome da empresa do cliente'
    });
  } else {
    console.log('‚è≠Ô∏è Campo company j√° existe');
  }

  if (!tableDescription.foreign_customer) {
    console.log('‚ûï Adicionando campo foreign_customer');
    await queryInterface.addColumn('users', 'foreign_customer', {
      type: DataTypes.BOOLEAN,
      allowNull: true,
      defaultValue: false,
      comment: 'true caso seja pagador estrangeiro'
    });
  } else {
    console.log('‚è≠Ô∏è Campo foreign_customer j√° existe');
  }

  // Contar quantos campos foram adicionados
  const finalTableDescription = await queryInterface.describeTable('users');
  const fieldsAdded = Object.keys(finalTableDescription).length - Object.keys(tableDescription).length;
  
  console.log(`üìù Adicionando ${fieldsAdded} novos campos √† tabela users`);
  console.log('‚úÖ Migra√ß√£o conclu√≠da com sucesso!');

  // Adicionar √≠ndices para melhorar performance (verificando se j√° existem)
  // (cpf_cnpj j√° tem √≠ndice na migra√ß√£o anterior)
  
  try {
    await queryInterface.addIndex('users', ['external_reference'], {
      name: 'users_external_reference_idx'
    });
    console.log('‚ûï √çndice users_external_reference_idx criado');
  } catch (error) {
    console.log('‚è≠Ô∏è √çndice users_external_reference_idx j√° existe');
  }

  try {
    await queryInterface.addIndex('users', ['postal_code'], {
      name: 'users_postal_code_idx'
    });
    console.log('‚ûï √çndice users_postal_code_idx criado');
  } catch (error) {
    console.log('‚è≠Ô∏è √çndice users_postal_code_idx j√° existe');
  }

  console.log('‚úÖ Campos do Asaas Customer adicionados na tabela users');
  },

  down: async (queryInterface, Sequelize) => {
  // Remover √≠ndices
  await queryInterface.removeIndex('users', 'users_external_reference_idx');
  await queryInterface.removeIndex('users', 'users_postal_code_idx');

  // Remover colunas (cpf_cnpj n√£o removemos pois est√° em outra migra√ß√£o)
  await queryInterface.removeColumn('users', 'phone');
  await queryInterface.removeColumn('users', 'phone');
  await queryInterface.removeColumn('users', 'mobile_phone');
  await queryInterface.removeColumn('users', 'address');
  await queryInterface.removeColumn('users', 'address_number');
  await queryInterface.removeColumn('users', 'complement');
  await queryInterface.removeColumn('users', 'province');
  await queryInterface.removeColumn('users', 'postal_code');
  await queryInterface.removeColumn('users', 'external_reference');
  await queryInterface.removeColumn('users', 'notification_disabled');
  await queryInterface.removeColumn('users', 'additional_emails');
  await queryInterface.removeColumn('users', 'municipal_inscription');
  await queryInterface.removeColumn('users', 'state_inscription');
  await queryInterface.removeColumn('users', 'observations');
  await queryInterface.removeColumn('users', 'group_name');
  await queryInterface.removeColumn('users', 'company');
  await queryInterface.removeColumn('users', 'foreign_customer');

  console.log('‚úÖ Campos do Asaas Customer removidos da tabela users');
  }
};
